Add e2e test for ship commands
Move custom matcher out of ship_transforms_spec.coffee
Error handlers.
Run tests on a different port, so having the server running doesn't blow them up.
Split server specs into e2e/unit directories.
Figure out how to test generated SVG in client. (index.html)
Review tests for coverage and organization.
Refactor out magic numbers for keycodes.
Move toAproximatelyEqual out of ship_outline_spec into helper, and use generally.
Move static web page code out to its own class.
Change all server.game references to be just game
Unit tests for Vector
Change ship#gun_point to be a function.
Review code for consistent usage of function over var
Check for consistency of use of self vs this
Check node API for error call backs that we should implement.
To avoid DOS attack limit number random ship position retries.
Seperate game coordinates from client coordinates
Scale game field to window size (client)
Create style guide
Handle bullet initialization without initial state. Or does this even make sense? 
Add code coverage tool for client side code.

Session Managment
    Handle websocket disconnects (end user's session?)
    Handle errors on socket connect

Before Release
    Add top level grunt to make sure a client 'grunt release' has been done before trying to run the server tests.
    Re-arrange project structure to have the client under the server directory
    Scoring
    Should have same ship after page reload.
    Indication of own ship.
    Explosions.
